//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Steering Wheel"",
            ""id"": ""5c0c9a1f-1601-450d-b71f-de4ab17a4d9b"",
            ""actions"": [
                {
                    ""name"": ""Steering"",
                    ""type"": ""Button"",
                    ""id"": ""7acc7198-bfb6-44c5-bff8-67dd01f71b5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""wheel"",
                    ""type"": ""Button"",
                    ""id"": ""abc6382b-27eb-46f2-9051-0988a9e80f0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SteeringTest"",
                    ""type"": ""Value"",
                    ""id"": ""8d22ba9a-b075-42e0-b26d-6fb6200a0890"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a711895f-a091-42c3-8157-0a09d4774795"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93a06832-af66-4798-82d0-6f50168db744"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0e8da56-0bb9-42a7-96b8-5e39bf9a22a8"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d656765f-f794-4d31-a3a7-feaeea682cf3"",
                    ""path"": ""<Logitech G29 Racing Wheel>/plusButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6a5fc55-a931-4557-9b76-50fb5eeea379"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d71cd71-33c3-4026-895e-1766fc9a78dc"",
                    ""path"": ""<HID::Logitech G29 Driving Force Racing Wheel>/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b47ec83-0342-4ec7-a3d1-a7174aa82a98"",
                    ""path"": ""<Logitech G29 Racing Wheel>/throttleAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringTest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Steering Wheel
        m_SteeringWheel = asset.FindActionMap("Steering Wheel", throwIfNotFound: true);
        m_SteeringWheel_Steering = m_SteeringWheel.FindAction("Steering", throwIfNotFound: true);
        m_SteeringWheel_wheel = m_SteeringWheel.FindAction("wheel", throwIfNotFound: true);
        m_SteeringWheel_SteeringTest = m_SteeringWheel.FindAction("SteeringTest", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Steering Wheel
    private readonly InputActionMap m_SteeringWheel;
    private List<ISteeringWheelActions> m_SteeringWheelActionsCallbackInterfaces = new List<ISteeringWheelActions>();
    private readonly InputAction m_SteeringWheel_Steering;
    private readonly InputAction m_SteeringWheel_wheel;
    private readonly InputAction m_SteeringWheel_SteeringTest;
    public struct SteeringWheelActions
    {
        private @Inputs m_Wrapper;
        public SteeringWheelActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steering => m_Wrapper.m_SteeringWheel_Steering;
        public InputAction @wheel => m_Wrapper.m_SteeringWheel_wheel;
        public InputAction @SteeringTest => m_Wrapper.m_SteeringWheel_SteeringTest;
        public InputActionMap Get() { return m_Wrapper.m_SteeringWheel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SteeringWheelActions set) { return set.Get(); }
        public void AddCallbacks(ISteeringWheelActions instance)
        {
            if (instance == null || m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Add(instance);
            @Steering.started += instance.OnSteering;
            @Steering.performed += instance.OnSteering;
            @Steering.canceled += instance.OnSteering;
            @wheel.started += instance.OnWheel;
            @wheel.performed += instance.OnWheel;
            @wheel.canceled += instance.OnWheel;
            @SteeringTest.started += instance.OnSteeringTest;
            @SteeringTest.performed += instance.OnSteeringTest;
            @SteeringTest.canceled += instance.OnSteeringTest;
        }

        private void UnregisterCallbacks(ISteeringWheelActions instance)
        {
            @Steering.started -= instance.OnSteering;
            @Steering.performed -= instance.OnSteering;
            @Steering.canceled -= instance.OnSteering;
            @wheel.started -= instance.OnWheel;
            @wheel.performed -= instance.OnWheel;
            @wheel.canceled -= instance.OnWheel;
            @SteeringTest.started -= instance.OnSteeringTest;
            @SteeringTest.performed -= instance.OnSteeringTest;
            @SteeringTest.canceled -= instance.OnSteeringTest;
        }

        public void RemoveCallbacks(ISteeringWheelActions instance)
        {
            if (m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISteeringWheelActions instance)
        {
            foreach (var item in m_Wrapper.m_SteeringWheelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SteeringWheelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SteeringWheelActions @SteeringWheel => new SteeringWheelActions(this);
    public interface ISteeringWheelActions
    {
        void OnSteering(InputAction.CallbackContext context);
        void OnWheel(InputAction.CallbackContext context);
        void OnSteeringTest(InputAction.CallbackContext context);
    }
}
